# DEFINITION DU DOCKER COMPOSE (3.5 -> DOCKER ENGINE ^17.12.0)
version: '3.5'
# DECLARATION DES SERVICES
services:
  # PROJET REACT 
  reactproject:
    # OUVERTURE DES PORTS MACHINE:IMAGE
    ports:
      - "3000:3000"
    # CHEMIN PERSISTANCE DE DONNEES
    volumes:
      - ../../reactproject/:/app
      # 3 etats (STARTING : HEALTHY : UNHEALTHY (ERREUR ou FIN DE PROGRAMME))
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready"]
      test: curl --fail -s http://localhost:3000 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # NOM DU CONTAINER
    container_name: reactproject
    # APPEL DE L'IMAGE SUR DOCKER HUB
    image: dratsisama/react
  # PROJET SYMFONY
  symfonyprojectdocker:
    # DEFINITION DES EXIGENCES POUR LE SERVICE DU CONTAINER D'IMAGE
    build: 
      # CHEMIN POUR LE DOCKER BUILD
      context: ../../symfonyprojectdocker/
      # CHOIX DU FICHIER POUR LE DOCKERFILE
      dockerfile: Dockerfile
    # OUVERTURE DES PORTS MACHINE:IMAGE (EXPOSE 80)
    ports:
      - "8080:80"
    # VA DEPENDRE DE
    depends_on:
      - redis
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready"]
      test: curl --fail http://localhost:80 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # NOM DU CONTAINER
    container_name: symfonyproject
    # APPEL DE L'IMAGE SUR DOCKER HUB
    image: dratsisama/symfony
  # EXPRESS
  express:
    build:
      context: ../../expressdocker/
      dockerfile: Dockerfile
    # image: express
    ports:
      - 4000:4000
    container_name: express
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready"]
      test: curl --fail http://localhost:4000 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  # MAILDEV
  maildev:
    image: djfarrelly/maildev
    restart: always
    ports:
      - "8003:80"
    container_name: maildev
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready"]
      test: curl --fail http://localhost:8003 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  # REDIS
  redis:
    # APPEL DE L'IMAGE DE REDIS 7 (persitence cache)
    image: redis:7
    # 
    command: redis-server
    # REDEMARRER TANT QU'ON NE DEMANDE PAS L'ARRET
    restart: unless-stopped
    # NOM DU CONTAINER
    container_name: redis
    healthcheck:
      # redis --raw (Force la sortie de la ligne) incr (increment) ping
      test: ["CMD", "redis-cli","--raw","incr","ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  # MYSQL
  mysql:
    image: mysql:8.0
    volumes: 
      - database:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: esgi
      MYSQL_USER: esgi
      MYSQL_PASSWORD: esgi
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-ppass"]
      interval: 10s
      retries: 120
  # PHPMYADMIN
  phpmyadmin:
    image: phpmyadmin
    depends_on:
      - mysql
    restart: always
    ports:
      - "8030:80"
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: password
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready"]
      test: curl --fail http://localhost:80 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  # TRAEFIK
# DEFINITION DES PATHS OU NOM DE VOLUMES ACCESSIBLES PAR LE SERVICE CONTAINERS
volumes:
  database: